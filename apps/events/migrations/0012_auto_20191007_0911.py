# Generated by Django 2.1.5 on 2019-10-07 09:11

import uuid

import apps.events.models
import ckeditor.fields
import ckeditor_uploader.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def limit_choices_to_content_type():
    return ()


class Migration(migrations.Migration):

    dependencies = [
        ("cities_light", "0008_city_timezone"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
        ("storage", "0004_image_isfromeditor"),
        ("events", "0011_event_city"),
    ]

    operations = [
        migrations.CreateModel(
            name="Party",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_column="uuid", default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True, verbose_name="Created date")),
                ("updated_date", models.DateTimeField(auto_now=True, verbose_name="Updated date")),
                ("is_deleted", models.BooleanField(db_index=True, default=False, verbose_name="Is deleted")),
                ("object_id", models.UUIDField(verbose_name="Object UUID")),
                ("address", ckeditor_uploader.fields.RichTextUploadingField(verbose_name="Address")),
                ("geo", django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name="Geo")),
                ("start_date", models.DateTimeField(verbose_name="Start date")),
                ("end_date", models.DateTimeField(verbose_name="End date")),
                (
                    "theme",
                    models.CharField(
                        choices=[
                            ("swing", "Swing"),
                            ("bdsm", "Bdsm"),
                            ("virt", "Virt"),
                            ("lgbt", "LGBT"),
                            ("poliamoria", "Poliamoria"),
                            ("other", "Other"),
                        ],
                        db_index=True,
                        max_length=16,
                        verbose_name="Theme",
                    ),
                ),
                (
                    "hash_tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=255), default=list, size=None, verbose_name="Hash tags"
                    ),
                ),
                ("views", models.PositiveIntegerField(default=0, verbose_name="Views")),
                ("title", models.CharField(max_length=255, verbose_name="Title")),
                ("slug", models.SlugField(max_length=150, unique=True, verbose_name="Slug")),
                ("short_description", ckeditor.fields.RichTextField(verbose_name="Short description")),
                ("description", ckeditor_uploader.fields.RichTextUploadingField(verbose_name="Description")),
                ("man_cost", models.FloatField(default=0, verbose_name="Man cost")),
                ("woman_cost", models.FloatField(default=0, verbose_name="Woman cost")),
                ("pair_cost", models.FloatField(default=0, verbose_name="Pair cost")),
                (
                    "city",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cities_light.City",
                        verbose_name="City",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        limit_choices_to=limit_choices_to_content_type,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                        verbose_name="Content type",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name="Creator"
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="storage.Image",
                        verbose_name="Image",
                    ),
                ),
                (
                    "likes",
                    models.ManyToManyField(
                        blank=True, related_name="like_parties", to=settings.AUTH_USER_MODEL, verbose_name="Likes"
                    ),
                ),
                (
                    "moderators",
                    models.ManyToManyField(
                        blank=True,
                        related_name="moderator_parties",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Moderators",
                    ),
                ),
            ],
            options={"verbose_name": "Party", "verbose_name_plural": "Parties"},
        ),
        migrations.CreateModel(
            name="PartyUser",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "status",
                    models.CharField(
                        choices=[("unknown", "Unknown"), ("no", "No"), ("yes", "Yes"), ("probably", "Probably")],
                        default="unknown",
                        max_length=16,
                        verbose_name="Theme",
                    ),
                ),
                (
                    "party",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="events.Party", verbose_name="Party"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name="User"
                    ),
                ),
            ],
            options={"verbose_name": "Party User", "verbose_name_plural": "Party Users"},
        ),
        migrations.RemoveField(model_name="event", name="avatar"),
        migrations.RemoveField(model_name="event", name="city"),
        migrations.RemoveField(model_name="event", name="content_type"),
        migrations.RemoveField(model_name="event", name="creator"),
        migrations.RemoveField(model_name="event", name="moderators"),
        migrations.RemoveField(model_name="event", name="users"),
        migrations.DeleteModel(name="Event"),
        migrations.AddField(
            model_name="party",
            name="users",
            field=models.ManyToManyField(
                blank=True,
                related_name="user_parties",
                through="events.PartyUser",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Users",
            ),
        ),
    ]
