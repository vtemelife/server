# Generated by Django 2.1.5 on 2019-03-31 23:00

import uuid

import apps.users.models
import django.contrib.postgres.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("storage", "0001_initial"),
        ("geo", "0001_initial"),
        ("auth", "0009_alter_user_last_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "id",
                    models.UUIDField(
                        db_column="uuid", default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("deleted", "Deleted"), ("created", "Created"), ("approved", "Approved")],
                        default="created",
                        max_length=32,
                        verbose_name="Status",
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True, verbose_name="Created date")),
                ("updated_date", models.DateTimeField(auto_now=True, verbose_name="Updated date")),
                ("email", models.EmailField(max_length=254, unique=True, verbose_name="Email")),
                ("username", models.CharField(max_length=150, verbose_name="Username")),
                ("age", models.CharField(max_length=64, null=True, verbose_name="Age")),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("m", "M"),
                            ("w", "W"),
                            ("family", "Family"),
                            ("mw", "MW"),
                            ("mm", "MM"),
                            ("ww", "WW"),
                            ("trans", "Trans"),
                        ],
                        max_length=16,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "relationship_status",
                    models.CharField(
                        choices=[("married", "Married"), ("dating", "Dating"), ("single", "Single")],
                        max_length=16,
                        null=True,
                        verbose_name="Relationship status",
                    ),
                ),
                (
                    "relationship_formats",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("open_swing", "Open Swing"),
                                ("close_swing", "Close Swing"),
                                ("soft_swing", "Soft Swing"),
                                ("wmw", "WMW"),
                                ("mwm", "MWM"),
                                ("sexwife", "Sexwife"),
                                ("cuckold", "Cuckold"),
                            ],
                            max_length=16,
                        ),
                        null=True,
                        size=None,
                        verbose_name="Relationship formats",
                    ),
                ),
                (
                    "relationship_themes",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("swing", "Swing"),
                                ("swing_history", "Swing History"),
                                ("bdsm", "Bdsm"),
                                ("bdsm_history", "Bdsm History"),
                                ("rule", "Rule"),
                                ("rule_media", "Rule Media"),
                                ("advertisment", "Advertisment"),
                            ],
                            max_length=16,
                        ),
                        null=True,
                        size=None,
                        verbose_name="Relationship themes",
                    ),
                ),
                ("vk_link", models.URLField(blank=True, null=True, verbose_name="Vkontakte link")),
                ("ok_link", models.URLField(blank=True, null=True, verbose_name="Odnoklassniki link")),
                ("fb_link", models.URLField(blank=True, null=True, verbose_name="Facebook link")),
                ("about", models.TextField(blank=True, null=True, verbose_name="О себе")),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("guest", "Guest"),
                            ("member", "Member"),
                            ("organizer", "Organizer"),
                            ("moderator", "Moderator"),
                            ("administrator", "Administrator"),
                        ],
                        default="guest",
                        max_length=16,
                        verbose_name="Role",
                    ),
                ),
                ("is_real", models.BooleanField(default=False, verbose_name="Real")),
                ("is_superuser", models.BooleanField(default=False, verbose_name="System administrator")),
                ("is_staff", models.BooleanField(default=False, verbose_name="Staff")),
                ("is_active", models.BooleanField(default=False, verbose_name="Active")),
                ("signup_key", models.PositiveIntegerField(blank=True, null=True, verbose_name="SignUp Key")),
                (
                    "reset_password_key",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Reset Password Key"),
                ),
                (
                    "show_age",
                    models.CharField(
                        choices=[
                            ("no_users", "No users"),
                            ("only_friends", "Only friends"),
                            ("all_users", "All users"),
                        ],
                        default="only_friends",
                        max_length=16,
                        verbose_name="Show age",
                    ),
                ),
                (
                    "show_avatar",
                    models.CharField(
                        choices=[
                            ("no_users", "No users"),
                            ("only_friends", "Only friends"),
                            ("all_users", "All users"),
                        ],
                        default="all_users",
                        max_length=16,
                        verbose_name="Show avatar",
                    ),
                ),
                (
                    "show_geo",
                    models.CharField(
                        choices=[
                            ("no_users", "No users"),
                            ("only_friends", "Only friends"),
                            ("all_users", "All users"),
                        ],
                        default="all_users",
                        max_length=16,
                        verbose_name="Show geo",
                    ),
                ),
                (
                    "show_email",
                    models.CharField(
                        choices=[
                            ("no_users", "No users"),
                            ("only_friends", "Only friends"),
                            ("all_users", "All users"),
                        ],
                        default="no_users",
                        max_length=16,
                        verbose_name="Show email",
                    ),
                ),
                (
                    "show_social",
                    models.CharField(
                        choices=[
                            ("no_users", "No users"),
                            ("only_friends", "Only friends"),
                            ("all_users", "All users"),
                        ],
                        default="no_users",
                        max_length=16,
                        verbose_name="Show social",
                    ),
                ),
                (
                    "show_media",
                    models.CharField(
                        choices=[
                            ("no_users", "No users"),
                            ("only_friends", "Only friends"),
                            ("all_users", "All users"),
                        ],
                        default="only_friends",
                        max_length=16,
                        verbose_name="Show media",
                    ),
                ),
                (
                    "show_posts",
                    models.CharField(
                        choices=[
                            ("no_users", "No users"),
                            ("only_friends", "Only friends"),
                            ("all_users", "All users"),
                        ],
                        default="only_friends",
                        max_length=16,
                        verbose_name="Show posts",
                    ),
                ),
                (
                    "show_friends",
                    models.CharField(
                        choices=[
                            ("no_users", "No users"),
                            ("only_friends", "Only friends"),
                            ("all_users", "All users"),
                        ],
                        default="only_friends",
                        max_length=16,
                        verbose_name="Show friends",
                    ),
                ),
                (
                    "approver",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approver_real_users",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approver real status",
                    ),
                ),
                (
                    "avatar",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="storage.Image",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "city",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="geo.City", verbose_name="City"
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="geo.Country", verbose_name="Country"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="geo.Region", verbose_name="Region"
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"verbose_name": "user", "verbose_name_plural": "users"},
            managers=[("objects", apps.users.models.UserManager())],
        ),
        migrations.CreateModel(
            name="UserFriend",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_column="uuid", default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("deleted", "Deleted"), ("created", "Created"), ("approved", "Approved")],
                        default="created",
                        max_length=32,
                        verbose_name="Status",
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True, verbose_name="Created date")),
                ("updated_date", models.DateTimeField(auto_now=True, verbose_name="Updated date")),
                (
                    "friend",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Content type",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_friends",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={"verbose_name": "user friend", "verbose_name_plural": "user friend"},
        ),
        migrations.AlterUniqueTogether(name="userfriend", unique_together={("user", "friend")}),
    ]
